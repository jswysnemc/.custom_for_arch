{"ref":"8772e2ba-8613-4865-9c32-a47fad8270fb","syncData":{"version":1,"machineId":"26998a8b-7364-49cd-a64c-f5252b99490a","content":"{\"cpp.json\":\"{\\n\\t// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"c++代码初始模板\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cpp\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include<bits/stdc++.h>\\\",\\n\\t\\t\\t\\\"using namespace std;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"int main() \\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"    $1\\\",\\n\\t\\t\\t\\\"    \\\",\\n\\t\\t\\t\\\"    return 0;\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"基础的头文件和main主体\\\"\\n\\t},\\n\\n\\t\\\"printf打印日志\\\": {\\n\\t\\t\\\"prefix\\\": \\\"pf\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"printf(\\\\\\\"$1\\\\\\\\n\\\\\\\"$2);\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"使用printf来打印日志\\\"\\n\\t},\\n\\n        \\n\\t\\\"main\\\": {\\n\\t\\t\\\"prefix\\\": \\\"main\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"int main(int argc,char *argv[]) {\\\",\\n            \\\"    $1\\\",\\n            \\\"    \\\",\\n            \\\"    \\\",\\n            \\\"    return 0;\\\",\\n            \\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"main主体代码\\\"\\n\\t}\\n\\n\\n}\",\"c.json\":\"{\\n\\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t\\\"printf打印日志\\\": {\\n\\t\\t\\\"prefix\\\": \\\"pf\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"printf(\\\\\\\"$1\\\\\\\\n\\\\\\\"$2);\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"使用printf来打印日志\\\"\\n\\t},\\n\\n    \\n\\t\\\"main\\\": {\\n\\t\\t\\\"prefix\\\": \\\"main\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"int main(int argc,char *argv[]) {\\\",\\n            \\\"    $1\\\",\\n            \\\"    \\\",\\n            \\\"    \\\",\\n            \\\"    return 0;\\\",\\n            \\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"main主体代码\\\"\\n\\t}\\n\\n    \\n\\n\\n}\",\"java.json\":\"{\\n\\t// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t\\\"Java竞赛代码模板(快读快写)\\\": {\\n\\t\\t\\\"prefix\\\": \\\"java\\\",\\n\\t\\t\\\"isFileTemplate\\\": true,\\n\\t\\t\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"/*题目来源:  $1\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"*/\\\",\\n\\n\\t\\t\\t\\\"import java.io.*;\\\",\\n\\t\\t\\t\\n\\t\\t\\t\\\"public class ${TM_FILENAME_BASE} {\\\",\\n\\t\\t\\t\\\"    $2\\\",\\n\\t\\t\\t\\\"    public static void main(String[] args) throws Exception{\\\",\\n\\t\\t\\t\\\"        $3\\\",\\n\\t\\t\\t\\\"        pw.flush();\\\",\\n\\t\\t\\t\\\"    }\\\",\\n\\t\\t\\t\\\"    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\\",\\n\\t\\t\\t\\\"    static StreamTokenizer st = new StreamTokenizer(br);\\\",\\n\\t\\t\\t\\\"    static int nextInt()throws Exception{st.nextToken();return (int)st.nval;}\\\",\\n\\t\\t\\t\\\"    static long nextLong()throws Exception{st.nextToken();return (long)st.nval;}\\\",\\n\\t\\t\\t\\\"    static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Java竞赛代码模板(快读快写)\\\"\\n\\t},\\n    \\\"Java调试log\\\": {\\n\\t\\t\\\"prefix\\\": \\\"log\\\",\\n\\t\\t\\n\\t\\t\\\"body\\\": [\\n            \\\"pw.println(\\\\\\\"log:$1\\\\\\\"$2);\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Java调试log\\\"\\n\\t}\\n}\"}"}}